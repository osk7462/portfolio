{"ast":null,"code":"import axios from 'axios';\nconst baseURL = 'http://127.0.0.1:8000/';\nconst axiosInstance = axios.create({\n  baseURL: baseURL,\n  timeout: 5000,\n  headers: {\n    // Authorization: localStorage.getItem('access_token')\n    // ? 'JWT ' + localStorage.getItem('access_token')\n    // : null,\n    'Content-Type': 'application/json',\n    accept: 'application/json'\n  }\n}); // axiosInstance.interceptors.response.use(\n// \t(response) => {\n// \t\treturn response;\n// \t},\n// \tasync function (error) {\n// \t\tconst originalRequest = error.config;\n// \t\tif (typeof error.response === 'undefined') {\n// \t\t\talert(\n// \t\t\t\t'A server/network error occurred. ' +\n// \t\t\t\t\t'Looks like CORS might be the problem. ' +\n// \t\t\t\t\t'Sorry about this - we will get it fixed shortly.'\n// \t\t\t);\n// \t\t\treturn Promise.reject(error);\n// \t\t}\n// \t\tif (\n// \t\t\terror.response.status === 401 &&\n// \t\t\toriginalRequest.url === baseURL + 'token/refresh/'\n// \t\t) {\n// \t\t\twindow.location.href = '/login/';\n// \t\t\treturn Promise.reject(error);\n// \t\t}\n// \t\tif (\n// \t\t\terror.response.data.code === 'token_not_valid' &&\n// \t\t\terror.response.status === 401 &&\n// \t\t\terror.response.statusText === 'Unauthorized'\n// \t\t) {\n// \t\t\tconst refreshToken = localStorage.getItem('refresh_token');\n// \t\t\tif (refreshToken != 'null') {\n// \t\t\t\tconst tokenParts = JSON.parse(atob(refreshToken.split('.')[1]));\n// \t\t\t\t// exp date in token is expressed in seconds, while now() returns milliseconds:\n// \t\t\t\tconst now = Math.ceil(Date.now() / 1000);\n// \t\t\t\tconsole.log(tokenParts.exp);\n// \t\t\t\tif (tokenParts.exp > now) {\n// \t\t\t\t\treturn axiosInstance\n// \t\t\t\t\t\t.post('/token/refresh/', { refresh: refreshToken })\n// \t\t\t\t\t\t.then((response) => {\n// \t\t\t\t\t\t\tlocalStorage.setItem('access_token', response.data.access);\n// \t\t\t\t\t\t\tlocalStorage.setItem('refresh_token', response.data.refresh);\n// \t\t\t\t\t\t\taxiosInstance.defaults.headers['Authorization'] =\n// \t\t\t\t\t\t\t\t'JWT ' + response.data.access;\n// \t\t\t\t\t\t\toriginalRequest.headers['Authorization'] =\n// \t\t\t\t\t\t\t\t'JWT ' + response.data.access;\n// \t\t\t\t\t\t\treturn axiosInstance(originalRequest);\n// \t\t\t\t\t\t})\n// \t\t\t\t\t\t.catch((err) => {\n// \t\t\t\t\t\t\tconsole.log(err);\n// \t\t\t\t\t\t});\n// \t\t\t\t} else {\n// \t\t\t\t\tconsole.log('Refresh token is expired', tokenParts.exp, now);\n// \t\t\t\t\twindow.location.href = '/login/';\n// \t\t\t\t}\n// \t\t\t} else {\n// \t\t\t\tconsole.log('Refresh token not available.');\n// \t\t\t\t// window.location.href = '/login/';\n// \t\t\t}\n// \t\t}\n// \t\t// specific error handling done elsewhere\n// \t\treturn Promise.reject(error);\n// \t}\n// );\n\nexport default axiosInstance;","map":{"version":3,"sources":["/home/osama/Desktop/portfolio/osama-khan/src/axios.js"],"names":["axios","baseURL","axiosInstance","create","timeout","headers","accept"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,OAAO,GAAG,wBAAhB;AAEA,MAAMC,aAAa,GAAGF,KAAK,CAACG,MAAN,CAAa;AACjCF,EAAAA,OAAO,EAAEA,OADwB;AAEjCG,EAAAA,OAAO,EAAE,IAFwB;AAGjCC,EAAAA,OAAO,EAAE;AACP;AACA;AACA;AACA,oBAAgB,kBAJT;AAKPC,IAAAA,MAAM,EAAE;AALD;AAHwB,CAAb,CAAtB,C,CAcA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAGA,eAAeJ,aAAf","sourcesContent":["import axios from 'axios'\n\nconst baseURL = 'http://127.0.0.1:8000/'\n\nconst axiosInstance = axios.create({\n  baseURL: baseURL,\n  timeout: 5000,\n  headers: {\n    // Authorization: localStorage.getItem('access_token')\n    // ? 'JWT ' + localStorage.getItem('access_token')\n    // : null,\n    'Content-Type': 'application/json',\n    accept: 'application/json'\n  } \n\n});\n\n\n// axiosInstance.interceptors.response.use(\n// \t(response) => {\n// \t\treturn response;\n// \t},\n// \tasync function (error) {\n// \t\tconst originalRequest = error.config;\n\n// \t\tif (typeof error.response === 'undefined') {\n// \t\t\talert(\n// \t\t\t\t'A server/network error occurred. ' +\n// \t\t\t\t\t'Looks like CORS might be the problem. ' +\n// \t\t\t\t\t'Sorry about this - we will get it fixed shortly.'\n// \t\t\t);\n// \t\t\treturn Promise.reject(error);\n// \t\t}\n\n// \t\tif (\n// \t\t\terror.response.status === 401 &&\n// \t\t\toriginalRequest.url === baseURL + 'token/refresh/'\n// \t\t) {\n// \t\t\twindow.location.href = '/login/';\n// \t\t\treturn Promise.reject(error);\n// \t\t}\n\n// \t\tif (\n// \t\t\terror.response.data.code === 'token_not_valid' &&\n// \t\t\terror.response.status === 401 &&\n// \t\t\terror.response.statusText === 'Unauthorized'\n// \t\t) {\n// \t\t\tconst refreshToken = localStorage.getItem('refresh_token');\n\n// \t\t\tif (refreshToken != 'null') {\n// \t\t\t\tconst tokenParts = JSON.parse(atob(refreshToken.split('.')[1]));\n\n// \t\t\t\t// exp date in token is expressed in seconds, while now() returns milliseconds:\n// \t\t\t\tconst now = Math.ceil(Date.now() / 1000);\n// \t\t\t\tconsole.log(tokenParts.exp);\n\n// \t\t\t\tif (tokenParts.exp > now) {\n// \t\t\t\t\treturn axiosInstance\n// \t\t\t\t\t\t.post('/token/refresh/', { refresh: refreshToken })\n// \t\t\t\t\t\t.then((response) => {\n// \t\t\t\t\t\t\tlocalStorage.setItem('access_token', response.data.access);\n// \t\t\t\t\t\t\tlocalStorage.setItem('refresh_token', response.data.refresh);\n\n// \t\t\t\t\t\t\taxiosInstance.defaults.headers['Authorization'] =\n// \t\t\t\t\t\t\t\t'JWT ' + response.data.access;\n// \t\t\t\t\t\t\toriginalRequest.headers['Authorization'] =\n// \t\t\t\t\t\t\t\t'JWT ' + response.data.access;\n\n// \t\t\t\t\t\t\treturn axiosInstance(originalRequest);\n// \t\t\t\t\t\t})\n// \t\t\t\t\t\t.catch((err) => {\n// \t\t\t\t\t\t\tconsole.log(err);\n// \t\t\t\t\t\t});\n// \t\t\t\t} else {\n// \t\t\t\t\tconsole.log('Refresh token is expired', tokenParts.exp, now);\n// \t\t\t\t\twindow.location.href = '/login/';\n// \t\t\t\t}\n// \t\t\t} else {\n// \t\t\t\tconsole.log('Refresh token not available.');\n// \t\t\t\t// window.location.href = '/login/';\n// \t\t\t}\n// \t\t}\n\n// \t\t// specific error handling done elsewhere\n// \t\treturn Promise.reject(error);\n// \t}\n// );\n\n\nexport default axiosInstance;"]},"metadata":{},"sourceType":"module"}