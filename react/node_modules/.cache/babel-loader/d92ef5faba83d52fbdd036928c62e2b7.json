{"ast":null,"code":"var _jsxFileName = \"/home/osama/Documents/portfolio/react/src/component/dialog/AddProjectDialog.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react'; // MuiComponent\n\nimport { Dialog as MuiDialog } from '@material-ui/core';\nimport { DialogTitle } from '@material-ui/core';\nimport { DialogContent } from '@material-ui/core';\nimport { Typography } from '@material-ui/core';\nimport { Grid } from '@material-ui/core';\nimport { TextField as MuiTextField } from '@material-ui/core';\nimport { Button } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/styles';\nimport { GlobalContext } from '../../ContextApi';\nimport axiosInstance from '../../axios';\nimport axios from 'axios';\nimport { IconButton } from '@material-ui/core';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { useHistory } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  paper: {\n    position: 'absolute',\n    top: 0\n  },\n  input: {\n    '& > *': {\n      margin: theme.spacing(1)\n    },\n    '& form > *': {\n      margin: theme.spacing(1)\n    }\n  },\n  closeButton: {\n    marginLeft: '90%',\n    fontSize: '1.2rem'\n  },\n  skills: {\n    fontWeight: 800,\n    opacity: 0.8\n  },\n  skillRoot: {\n    display: 'flex',\n    alignItems: 'baseline',\n    '& > *': {\n      margin: theme.spacing(0.3)\n    }\n  },\n  btnSubmit: {\n    background: theme.palette.success.dark,\n    color: 'white',\n    '&:hover': {\n      background: theme.palette.success.dark\n    }\n  }\n}));\n\nconst TextField = ({ ...others\n}) => {\n  return /*#__PURE__*/_jsxDEV(MuiTextField, {\n    size: \"small\",\n    variant: \"outlined\",\n    ...others\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n};\n\n_c = TextField;\n\nconst InputButton = ({\n  children,\n  ...others\n}) => {\n  return /*#__PURE__*/_jsxDEV(Button, {\n    variant: \"contained\",\n    component: \"label\",\n    color: \"primary\",\n    ...others,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};\n\n_c2 = InputButton;\n\nfunction ProjectDialog({\n  open,\n  setOpen\n}) {\n  _s();\n\n  const {\n    profile,\n    loading,\n    setProfile\n  } = GlobalContext();\n  const [profileInput, setProfileInput] = React.useState(profile);\n  const form = React.useRef(null);\n  const history = useHistory();\n  const classes = useStyles();\n  return /*#__PURE__*/_jsxDEV(MuiDialog, {\n    open: open,\n    maxWidth: \"sm\",\n    onClose: () => setOpen(true),\n    classes: {\n      paper: classes.paper\n    },\n    children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        align: \"right\",\n        color: \"secondary\",\n        className: classes.closeButton,\n        onClick: () => setOpen(false),\n        children: \"X\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        justify: \"center\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          ref: form,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            className: classes.input,\n            children: [/*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              name: \"name\",\n              label: \"name\" // value={profileInput.name}\n              // error={!profileInput.name}\n              // helperText={!profileInput.name ? '*this field cannot be empty': ''}\n              // onChange={handleChange}\n\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              name: \"description\",\n              label: \"description\" // value={profileInput.description}\n              // onChange={handleChange}\n              ,\n              multiline: true,\n              rows: 5 // error={!profileInput.description}\n              // helperText={!profileInput.description ? '*this field cannot be empty': ''}\n\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(InputButton, {\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"file\",\n                accept: \"image/*\",\n                name: \"image\" // onChange={handleChange}\n\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 151,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 149,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(InputButton, {\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"file\",\n                accept: \"application/pdf\",\n                name: \"resume\" // onChange={handleChange}\n\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 163,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 159,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h6\",\n              className: classes.skills,\n              children: \"skills\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 17\n            }, this), profileInput.skills.map((skill, index) => {\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: classes.skillRoot,\n                children: [/*#__PURE__*/_jsxDEV(TextField, {\n                  label: \"skill name\",\n                  name: \"skill_name\" // value={skill.name}\n                  // onChange={ e => handleChange(e, index)}\n                  // error={!skill.name}\n                  // helperText={!skill.name ? '*this field cannot be empty': ''}\n\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 185,\n                  columnNumber: 27\n                }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                  label: \"proficiency\",\n                  name: \"skill_proficiency\" // value={skill.proficiency}\n                  // onChange={(e => handleNumber(e, index))}\n                  // error={!skill.proficiency}\n                  // helperText={!skill.proficiency ? 'this field cannot be empty': ''}\n\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 194,\n                  columnNumber: 27\n                }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n                  color: \"secondary\" // onClick={(e)=>handleSkillDelete(e, skill.id, index)}\n                  ,\n                  children: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 206,\n                    columnNumber: 29\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 202,\n                  columnNumber: 27\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 182,\n                columnNumber: 25\n              }, this);\n            }), /*#__PURE__*/_jsxDEV(Button, {\n              color: \"primary\",\n              variant: \"contained\" // onClick={(e) => handleAddSkill(e)}\n              ,\n              children: \"Add another\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 214,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            fullWidth: true,\n            variant: \"contained\",\n            className: classes.btnSubmit // onClick={(e)=>handleSubmit(e)}\n            ,\n            children: \"submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ProjectDialog, \"jCDBI5EFG0AZ29gG1l/NGl7dpII=\", false, function () {\n  return [useHistory, useStyles];\n});\n\n_c3 = ProjectDialog;\nexport default ProjectDialog;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"TextField\");\n$RefreshReg$(_c2, \"InputButton\");\n$RefreshReg$(_c3, \"ProjectDialog\");","map":{"version":3,"sources":["/home/osama/Documents/portfolio/react/src/component/dialog/AddProjectDialog.js"],"names":["React","Dialog","MuiDialog","DialogTitle","DialogContent","Typography","Grid","TextField","MuiTextField","Button","makeStyles","GlobalContext","axiosInstance","axios","IconButton","DeleteIcon","useHistory","useStyles","theme","paper","position","top","input","margin","spacing","closeButton","marginLeft","fontSize","skills","fontWeight","opacity","skillRoot","display","alignItems","btnSubmit","background","palette","success","dark","color","others","InputButton","children","ProjectDialog","open","setOpen","profile","loading","setProfile","profileInput","setProfileInput","useState","form","useRef","history","classes","map","skill","index"],"mappings":";;;AACA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,SAAQC,MAAM,IAAIC,SAAlB,QAAkC,mBAAlC;AACA,SAASC,WAAT,QAA4B,mBAA5B;AACA,SAAQC,aAAR,QAA4B,mBAA5B;AACA,SAAQC,UAAR,QAAyB,mBAAzB;AACA,SAAQC,IAAR,QAAmB,mBAAnB;AACA,SAAQC,SAAS,IAAIC,YAArB,QAAwC,mBAAxC;AACA,SAASC,MAAT,QAAuB,mBAAvB;AACA,SAASC,UAAT,QAA2B,qBAA3B;AACA,SAAQC,aAAR,QAA4B,kBAA5B;AACA,OAAOC,aAAP,MAA0B,aAA1B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,mBAA3B;AACA,OAAOC,UAAP,MAAuB,2BAAvB;AACA,SAAQC,UAAR,QAAyB,kBAAzB;;AAGA,MAAMC,SAAS,GAAGP,UAAU,CAACQ,KAAK,KAAI;AACpCC,EAAAA,KAAK,EAAE;AACLC,IAAAA,QAAQ,EAAE,UADL;AAELC,IAAAA,GAAG,EAAE;AAFA,GAD6B;AAKpCC,EAAAA,KAAK,EAAG;AACN,aAAQ;AACNC,MAAAA,MAAM,EAAEL,KAAK,CAACM,OAAN,CAAc,CAAd;AADF,KADF;AAIN,kBAAa;AACXD,MAAAA,MAAM,EAAEL,KAAK,CAACM,OAAN,CAAc,CAAd;AADG;AAJP,GAL4B;AAepCC,EAAAA,WAAW,EAAG;AACZC,IAAAA,UAAU,EAAE,KADA;AAEZC,IAAAA,QAAQ,EAAE;AAFE,GAfsB;AAoBpCC,EAAAA,MAAM,EAAG;AACPC,IAAAA,UAAU,EAAE,GADL;AAEPC,IAAAA,OAAO,EAAE;AAFF,GApB2B;AAyBpCC,EAAAA,SAAS,EAAE;AACTC,IAAAA,OAAO,EAAE,MADA;AAETC,IAAAA,UAAU,EAAE,UAFH;AAIT,aAAS;AACPV,MAAAA,MAAM,EAAEL,KAAK,CAACM,OAAN,CAAc,GAAd;AADD;AAJA,GAzByB;AAoCpCU,EAAAA,SAAS,EAAE;AACTC,IAAAA,UAAU,EAAEjB,KAAK,CAACkB,OAAN,CAAcC,OAAd,CAAsBC,IADzB;AAETC,IAAAA,KAAK,EAAE,OAFE;AAIT,eAAW;AACTJ,MAAAA,UAAU,EAAEjB,KAAK,CAACkB,OAAN,CAAcC,OAAd,CAAsBC;AADzB;AAJF;AApCyB,CAAJ,CAAN,CAA5B;;AAmDA,MAAM/B,SAAS,GAAG,CAAC,EAAC,GAAGiC;AAAJ,CAAD,KAAiB;AACjC,sBACE,QAAC,YAAD;AACE,IAAA,IAAI,EAAC,OADP;AAEE,IAAA,OAAO,EAAC,UAFV;AAAA,OAGMA;AAHN;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,CARD;;KAAMjC,S;;AAUN,MAAMkC,WAAW,GAAG,CAAC;AAACC,EAAAA,QAAD;AAAW,KAAGF;AAAd,CAAD,KAA2B;AAC7C,sBACE,QAAC,MAAD;AACE,IAAA,OAAO,EAAC,WADV;AAEE,IAAA,SAAS,EAAC,OAFZ;AAGE,IAAA,KAAK,EAAC,SAHR;AAAA,OAIMA,MAJN;AAAA,cAMGE;AANH;AAAA;AAAA;AAAA;AAAA,UADF;AAUD,CAXD;;MAAMD,W;;AAgBN,SAASE,aAAT,CAAuB;AAACC,EAAAA,IAAD;AAAOC,EAAAA;AAAP,CAAvB,EAAwC;AAAA;;AACtC,QAAM;AAACC,IAAAA,OAAD;AAAUC,IAAAA,OAAV;AAAmBC,IAAAA;AAAnB,MAAiCrC,aAAa,EAApD;AACA,QAAM,CAACsC,YAAD,EAAeC,eAAf,IAAkClD,KAAK,CAACmD,QAAN,CAAeL,OAAf,CAAxC;AACA,QAAMM,IAAI,GAAGpD,KAAK,CAACqD,MAAN,CAAa,IAAb,CAAb;AACA,QAAMC,OAAO,GAAGtC,UAAU,EAA1B;AAEA,QAAMuC,OAAO,GAAGtC,SAAS,EAAzB;AAEA,sBACE,QAAC,SAAD;AACE,IAAA,IAAI,EAAE2B,IADR;AAEE,IAAA,QAAQ,EAAC,IAFX;AAGE,IAAA,OAAO,EAAE,MAAIC,OAAO,CAAC,IAAD,CAHtB;AAIE,IAAA,OAAO,EAAI;AAAC1B,MAAAA,KAAK,EAAEoC,OAAO,CAACpC;AAAhB,KAJb;AAAA,4BAME,QAAC,WAAD;AAAA,6BACE,QAAC,MAAD;AACC,QAAA,KAAK,EAAC,OADP;AAEC,QAAA,KAAK,EAAC,WAFP;AAGC,QAAA,SAAS,EAAEoC,OAAO,CAAC9B,WAHpB;AAIC,QAAA,OAAO,EAAE,MAAIoB,OAAO,CAAC,KAAD,CAJrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YANF,eAiBE,QAAC,aAAD;AAAA,6BACE,QAAC,IAAD;AAAM,QAAA,SAAS,MAAf;AAAgB,QAAA,OAAO,EAAC,QAAxB;AAAA,+BACI;AAAM,UAAA,GAAG,EAAEO,IAAX;AAAA,kCACE,QAAC,IAAD;AAAM,YAAA,IAAI,MAAV;AAAW,YAAA,EAAE,EAAE,EAAf;AAAmB,YAAA,SAAS,EAAEG,OAAO,CAACjC,KAAtC;AAAA,oCACE,QAAC,SAAD;AACE,cAAA,SAAS,MADX;AAEE,cAAA,IAAI,EAAC,MAFP;AAGE,cAAA,KAAK,EAAC,MAHR,CAIE;AACA;AACA;AACA;;AAPF;AAAA;AAAA;AAAA;AAAA,oBADF,eAUE,QAAC,SAAD;AACE,cAAA,SAAS,MADX;AAEE,cAAA,IAAI,EAAC,aAFP;AAGE,cAAA,KAAK,EAAC,aAHR,CAIE;AACA;AALF;AAME,cAAA,SAAS,MANX;AAOE,cAAA,IAAI,EAAE,CAPR,CAQE;AACA;;AATF;AAAA;AAAA;AAAA;AAAA,oBAVF,eAsBE,QAAC,WAAD;AAAA,qCAEE;AACE,gBAAA,IAAI,EAAC,MADP;AAEE,gBAAA,MAAM,EAAC,SAFT;AAGE,gBAAA,IAAI,EAAC,OAHP,CAIE;;AAJF;AAAA;AAAA;AAAA;AAAA;AAFF;AAAA;AAAA;AAAA;AAAA,oBAtBF,eAgCE,QAAC,WAAD;AAAA,qCAIE;AACE,gBAAA,IAAI,EAAC,MADP;AAEE,gBAAA,MAAM,EAAC,iBAFT;AAGE,gBAAA,IAAI,EAAC,QAHP,CAIE;;AAJF;AAAA;AAAA;AAAA;AAAA;AAJF;AAAA;AAAA;AAAA;AAAA,oBAhCF,eA4CE,QAAC,UAAD;AACE,cAAA,OAAO,EAAC,IADV;AAEE,cAAA,SAAS,EAAEiC,OAAO,CAAC3B,MAFrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBA5CF,EAoDIqB,YAAY,CAACrB,MAAb,CAAoB4B,GAApB,CAAyB,CAACC,KAAD,EAAQC,KAAR,KAAkB;AAEzC,kCACI;AACE,gBAAA,SAAS,EAAEH,OAAO,CAACxB,SADrB;AAAA,wCAGE,QAAC,SAAD;AACE,kBAAA,KAAK,EAAC,YADR;AAEE,kBAAA,IAAI,EAAC,YAFP,CAGE;AACA;AACA;AACA;;AANF;AAAA;AAAA;AAAA;AAAA,wBAHF,eAYE,QAAC,SAAD;AACE,kBAAA,KAAK,EAAC,aADR;AAEE,kBAAA,IAAI,EAAC,mBAFP,CAGE;AACA;AACA;AACA;;AANF;AAAA;AAAA;AAAA;AAAA,wBAZF,eAoBE,QAAC,UAAD;AACE,kBAAA,KAAK,EAAC,WADR,CAEE;AAFF;AAAA,yCAIE,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAJF;AAAA;AAAA;AAAA;AAAA,wBApBF;AAAA,iBAAU2B,KAAV;AAAA;AAAA;AAAA;AAAA,sBADJ;AA8BD,aAhCD,CApDJ,eAuFE,QAAC,MAAD;AACE,cAAA,KAAK,EAAC,SADR;AAEE,cAAA,OAAO,EAAC,WAFV,CAGE;AAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAvFF;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAiGE,QAAC,MAAD;AACE,YAAA,SAAS,MADX;AAEE,YAAA,OAAO,EAAC,WAFV;AAGE,YAAA,SAAS,EAAEH,OAAO,CAACrB,SAHrB,CAIE;AAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAjGF;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAjBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAsID;;GA9IQS,a;UAIS3B,U,EAEAC,S;;;MANT0B,a;AAgJT,eAAeA,aAAf","sourcesContent":["\nimport React from 'react'\n\n// MuiComponent\nimport {Dialog as MuiDialog} from '@material-ui/core'\nimport { DialogTitle } from '@material-ui/core'\nimport {DialogContent} from '@material-ui/core'\nimport {Typography} from '@material-ui/core'\nimport {Grid} from '@material-ui/core'\nimport {TextField as MuiTextField} from '@material-ui/core'\nimport { Button } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/styles'\nimport {GlobalContext} from '../../ContextApi'\nimport axiosInstance from '../../axios'\nimport axios from 'axios'\nimport { IconButton } from '@material-ui/core'\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport {useHistory} from 'react-router-dom'\n\n\nconst useStyles = makeStyles(theme=> ({\n  paper: {\n    position: 'absolute',\n    top: 0,\n  },\n  input : {\n    '& > *':{\n      margin: theme.spacing(1)\n    },\n    '& form > *':{\n      margin: theme.spacing(1)\n    }\n    \n  },\n\n  closeButton : {\n    marginLeft: '90%',\n    fontSize: '1.2rem'\n  },\n\n  skills : {\n    fontWeight: 800,\n    opacity: 0.8\n  },\n\n  skillRoot: {\n    display: 'flex',\n    alignItems: 'baseline',\n  \n    '& > *': {\n      margin: theme.spacing(0.3)\n    },\n    \n    \n  },\n\n  btnSubmit: {\n    background: theme.palette.success.dark,\n    color: 'white',\n\n    '&:hover': {\n      background: theme.palette.success.dark\n    }\n  },\n\n\n\n}))\n\n\n\nconst TextField = ({...others}) => {\n  return (\n    <MuiTextField \n      size=\"small\"\n      variant=\"outlined\"\n      {...others}\n    />\n  )\n}\n\nconst InputButton = ({children, ...others}) => {\n  return (\n    <Button \n      variant=\"contained\"\n      component=\"label\"\n      color='primary'\n      {...others}\n    >\n      {children}\n    </Button>\n  )\n}\n\n\n\n\nfunction ProjectDialog({open, setOpen}) {\n  const {profile, loading, setProfile} = GlobalContext()\n  const [profileInput, setProfileInput] = React.useState(profile)\n  const form = React.useRef(null)\n  const history = useHistory()\n\n  const classes = useStyles()\n\n  return (\n    <MuiDialog \n      open={open}\n      maxWidth=\"sm\"\n      onClose={()=>setOpen(true)}\n      classes = {{paper: classes.paper}}\n    >\n      <DialogTitle>\n        <Button\n         align=\"right\"\n         color='secondary'\n         className={classes.closeButton}\n         onClick={()=>setOpen(false)}\n        >\n          X\n        </Button>\n      </DialogTitle>\n\n      <DialogContent>\n        <Grid container justify=\"center\" >\n            <form ref={form}>\n              <Grid item xs={12} className={classes.input}>\n                <TextField \n                  fullWidth\n                  name=\"name\"\n                  label=\"name\"  \n                  // value={profileInput.name}\n                  // error={!profileInput.name}\n                  // helperText={!profileInput.name ? '*this field cannot be empty': ''}\n                  // onChange={handleChange}\n                />\n                <TextField \n                  fullWidth\n                  name=\"description\"\n                  label=\"description\"  \n                  // value={profileInput.description}\n                  // onChange={handleChange}\n                  multiline\n                  rows={5}\n                  // error={!profileInput.description}\n                  // helperText={!profileInput.description ? '*this field cannot be empty': ''}\n                />\n\n                <InputButton\n                >\n                  <input\n                    type='file'\n                    accept='image/*'\n                    name='image'\n                    // onChange={handleChange}\n                  />\n                </InputButton>\n\n                <InputButton            \n                \n                >\n\n                  <input \n                    type='file'\n                    accept='application/pdf'\n                    name='resume'\n                    // onChange={handleChange}\n                  />\n                </InputButton>\n                \n                <Typography\n                  variant='h6'\n                  className={classes.skills}\n                >\n                  skills\n                </Typography>\n                 \n                {\n                  profileInput.skills.map( (skill, index) => {\n                    \n                    return (\n                        <div key={index}\n                          className={classes.skillRoot}\n                        >\n                          <TextField \n                            label='skill name'\n                            name='skill_name'\n                            // value={skill.name}\n                            // onChange={ e => handleChange(e, index)}\n                            // error={!skill.name}\n                            // helperText={!skill.name ? '*this field cannot be empty': ''}\n                          \n                          />\n                          <TextField \n                            label='proficiency'\n                            name='skill_proficiency'\n                            // value={skill.proficiency}\n                            // onChange={(e => handleNumber(e, index))}\n                            // error={!skill.proficiency}\n                            // helperText={!skill.proficiency ? 'this field cannot be empty': ''}\n                          />\n                          <IconButton \n                            color='secondary'\n                            // onClick={(e)=>handleSkillDelete(e, skill.id, index)}\n                            >\n                            <DeleteIcon />\n                          </IconButton>\n                        </div>\n                    )\n                  \n                  })\n\n                }\n                <Button \n                  color='primary'\n                  variant='contained'\n                  // onClick={(e) => handleAddSkill(e)}\n                >\n                Add another\n                </Button>\n              </Grid>\n              \n              <Button\n                fullWidth\n                variant='contained'\n                className={classes.btnSubmit}\n                // onClick={(e)=>handleSubmit(e)}\n              >\n                submit\n              </Button>\n            </form>\n        </Grid>\n\n\n\n      </DialogContent>\n      \n    </MuiDialog>\n  )\n}\n\nexport default ProjectDialog\n"]},"metadata":{},"sourceType":"module"}