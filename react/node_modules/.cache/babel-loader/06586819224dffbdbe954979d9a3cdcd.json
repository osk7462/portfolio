{"ast":null,"code":"var _jsxFileName = \"/home/osama/Desktop/portfolio/osama-khan/src/component/Header/Dialog.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react'; // MuiComponent\n\nimport { Dialog as MuiDialog } from '@material-ui/core';\nimport { DialogTitle } from '@material-ui/core';\nimport { DialogContent } from '@material-ui/core';\nimport { Typography } from '@material-ui/core';\nimport { Grid } from '@material-ui/core';\nimport { TextField as MuiTextField } from '@material-ui/core';\nimport { Button } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/styles';\nimport { GlobalContext } from '../../ContextApi';\nimport axiosInstance from '../../axios';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  paper: {\n    position: 'absolute',\n    top: 0\n  },\n  input: {\n    '& > *': {\n      margin: theme.spacing(1)\n    },\n    '& form > *': {\n      margin: theme.spacing(1)\n    }\n  },\n  closeButton: {\n    marginLeft: '90%',\n    fontSize: '1.2rem'\n  },\n  skills: {\n    fontWeight: 800,\n    opacity: 0.8\n  },\n  skillRoot: {\n    display: 'flex',\n    '& > *': {\n      margin: theme.spacing(0.3)\n    }\n  },\n  btnSubmit: {\n    background: theme.palette.success.dark,\n    color: 'white',\n    '&:hover': {\n      background: theme.palette.success.dark\n    }\n  }\n}));\n\nconst TextField = ({ ...others\n}) => {\n  return /*#__PURE__*/_jsxDEV(MuiTextField, {\n    size: \"small\",\n    variant: \"outlined\",\n    ...others\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n\n_c = TextField;\n\nconst InputButton = ({\n  children,\n  ...others\n}) => {\n  return /*#__PURE__*/_jsxDEV(Button, {\n    variant: \"contained\",\n    component: \"label\",\n    color: \"primary\",\n    ...others,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n};\n\n_c2 = InputButton;\n\nfunction Dialog({\n  open,\n  setClose\n}) {\n  _s();\n\n  const {\n    profile,\n    loading\n  } = GlobalContext();\n  const [profileInput, setProfileInput] = React.useState(profile);\n  const form = React.useRef(null);\n  const classes = useStyles();\n\n  const handleChange = (e, index) => {\n    const {\n      name\n    } = e.target;\n    let value = '';\n\n    if (name === 'image' || name === 'resume') {\n      value = e.target.files[0];\n    } else {\n      value = e.target.value;\n    }\n\n    if (name.includes('skill', 0)) {\n      let tempProfileInput = { ...profileInput\n      };\n      tempProfileInput.skills[index] = { ...tempProfileInput.skills[index],\n        [name.substr(6)]: value\n      };\n      setProfileInput(tempProfileInput);\n    } else {\n      setProfileInput(prevState => {\n        return { ...prevState,\n          [name]: value\n        };\n      });\n    }\n  };\n\n  const handleNumber = (e, index) => {\n    const {\n      value\n    } = e.target;\n    const re = /^[0-9\\b]+$/;\n\n    if (value === '' || re.test(value)) {\n      handleChange(e, index);\n    }\n  };\n\n  const handleAddSkill = e => {\n    e.preventDefault();\n    const temp = { ...profileInput\n    };\n    temp.skills.push({\n      name: '',\n      proficiency: ''\n    });\n    setProfileInput(temp);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    let formData = new FormData();\n\n    for (const [key, value] of Object.entries(profileInput)) {\n      console.log(key, value);\n    }\n\n    console.log(...profileInput.skills);\n\n    for (let pair of formData.entries()) {\n      console.log(pair[0], pair[1]);\n    }\n\n    const config = {\n      headers: {\n        Authorization: localStorage.getItem('access_token') ? 'JWT ' + localStorage.getItem('access_token') : null,\n        'Content-Type': 'multipart-form-data'\n      }\n    };\n    const url = 'http://127.0.0.1:8000/about/1/';\n    axios.patch(url, formData, config).then(response => {}).catch(err => console.log(err));\n    axiosInstance.patch('about/1/', {\n      skills: [...profileInput.skills]\n    }).then(response => console.log(response)).catch(error => {\n      const err = error.response.data; // console.log(err)\n\n      err.skills.forEach((item, index) => {\n        if (item.name || item.proficiency) {\n          console.log(item, index);\n        }\n      });\n    });\n  };\n\n  React.useEffect(() => {\n    setProfileInput(profile);\n  }, [loading]);\n  return /*#__PURE__*/_jsxDEV(MuiDialog, {\n    open: open,\n    maxWidth: \"sm\",\n    onClose: () => setClose(true),\n    classes: {\n      paper: classes.paper\n    },\n    children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        align: \"right\",\n        color: \"secondary\",\n        className: classes.closeButton,\n        onClick: () => setClose(false),\n        children: \"X\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        justify: \"center\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          ref: form,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            className: classes.input,\n            children: [/*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              name: \"name\",\n              label: \"name\",\n              value: profileInput.name,\n              error: !profileInput.name,\n              helperText: !profileInput.name ? '*this field cannot be empty' : '',\n              onChange: handleChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 215,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              name: \"description\",\n              label: \"description\",\n              value: profileInput.description,\n              onChange: handleChange,\n              multiline: true,\n              rows: 5,\n              error: !profileInput.description,\n              helperText: !profileInput.description ? '*this field cannot be empty' : ''\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 224,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(InputButton, {\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"file\",\n                accept: \"image/*\",\n                name: \"image\",\n                onChange: handleChange\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 238,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 236,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(InputButton, {\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"file\",\n                accept: \"application/pdf\",\n                name: \"resume\",\n                onChange: handleChange\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 250,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 246,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h6\",\n              className: classes.skills,\n              children: \"skills\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 258,\n              columnNumber: 17\n            }, this), profileInput.skills.map((skill, index) => {\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: classes.skillRoot,\n                children: [/*#__PURE__*/_jsxDEV(TextField, {\n                  label: \"skill name\",\n                  name: \"skill_name\",\n                  value: skill.name,\n                  onChange: e => handleChange(e, index),\n                  error: !skill.name,\n                  helperText: !skill.name ? '*this field cannot be empty' : ''\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 272,\n                  columnNumber: 27\n                }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                  label: \"proficiency\",\n                  name: \"skill_proficiency\",\n                  value: skill.proficiency,\n                  onChange: e => handleNumber(e, index),\n                  error: !skill.proficiency,\n                  helperText: !skill.proficiency ? 'this field cannot be empty' : ''\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 281,\n                  columnNumber: 27\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  children: \"d\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 289,\n                  columnNumber: 27\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 269,\n                columnNumber: 25\n              }, this);\n            }), /*#__PURE__*/_jsxDEV(Button, {\n              color: \"primary\",\n              variant: \"contained\",\n              onClick: e => handleAddSkill(e),\n              children: \"Add another\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 298,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            fullWidth: true,\n            variant: \"contained\",\n            className: classes.btnSubmit,\n            onClick: e => handleSubmit(e),\n            children: \"submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 307,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 194,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Dialog, \"UufXvHObw3OUBgfQtv+OiVwbLFE=\", false, function () {\n  return [useStyles];\n});\n\n_c3 = Dialog;\nexport default Dialog;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"TextField\");\n$RefreshReg$(_c2, \"InputButton\");\n$RefreshReg$(_c3, \"Dialog\");","map":{"version":3,"sources":["/home/osama/Desktop/portfolio/osama-khan/src/component/Header/Dialog.js"],"names":["React","Dialog","MuiDialog","DialogTitle","DialogContent","Typography","Grid","TextField","MuiTextField","Button","makeStyles","GlobalContext","axiosInstance","axios","useStyles","theme","paper","position","top","input","margin","spacing","closeButton","marginLeft","fontSize","skills","fontWeight","opacity","skillRoot","display","btnSubmit","background","palette","success","dark","color","others","InputButton","children","open","setClose","profile","loading","profileInput","setProfileInput","useState","form","useRef","classes","handleChange","e","index","name","target","value","files","includes","tempProfileInput","substr","prevState","handleNumber","re","test","handleAddSkill","preventDefault","temp","push","proficiency","handleSubmit","formData","FormData","key","Object","entries","console","log","pair","config","headers","Authorization","localStorage","getItem","url","patch","then","response","catch","err","error","data","forEach","item","useEffect","description","map","skill"],"mappings":"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","sourcesContent":["\nimport React from 'react'\n\n// MuiComponent\nimport {Dialog as MuiDialog} from '@material-ui/core'\nimport { DialogTitle } from '@material-ui/core'\nimport {DialogContent} from '@material-ui/core'\nimport {Typography} from '@material-ui/core'\nimport {Grid} from '@material-ui/core'\nimport {TextField as MuiTextField} from '@material-ui/core'\nimport { Button } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/styles'\nimport {GlobalContext} from '../../ContextApi'\nimport axiosInstance from '../../axios'\nimport axios from 'axios'\n\nconst useStyles = makeStyles(theme=> ({\n  paper: {\n    position: 'absolute',\n    top: 0,\n  },\n  input : {\n    '& > *':{\n      margin: theme.spacing(1)\n    },\n    '& form > *':{\n      margin: theme.spacing(1)\n    }\n    \n  },\n\n  closeButton : {\n    marginLeft: '90%',\n    fontSize: '1.2rem'\n  },\n\n  skills : {\n    fontWeight: 800,\n    opacity: 0.8\n  },\n\n  skillRoot: {\n    display: 'flex',\n    '& > *': {\n      margin: theme.spacing(0.3)\n    }\n    \n  },\n\n  btnSubmit: {\n    background: theme.palette.success.dark,\n    color: 'white',\n\n    '&:hover': {\n      background: theme.palette.success.dark\n    }\n  },\n\n\n\n}))\n\n\n\nconst TextField = ({...others}) => {\n  return (\n    <MuiTextField \n      size=\"small\"\n      variant=\"outlined\"\n      {...others}\n    />\n  )\n}\n\nconst InputButton = ({children, ...others}) => {\n  return (\n    <Button \n      variant=\"contained\"\n      component=\"label\"\n      color='primary'\n      {...others}\n    >\n      {children}\n    </Button>\n  )\n}\n\n\n\n\n\n\n\n\nfunction Dialog({open, setClose}) {\n  const {profile, loading} = GlobalContext()\n  const [profileInput, setProfileInput] = React.useState(profile)\n  const form = React.useRef(null)\n\n  const classes = useStyles()\n\n\n  const handleChange =  (e, index) => {\n\n    const {name} = e.target\n    let value = ''\n    if (name === 'image' || name === 'resume') {\n      value = e.target.files[0]\n    } else {\n      value = e.target.value\n    }\n    if (name.includes('skill', 0)) {\n      let tempProfileInput = {...profileInput}\n      tempProfileInput.skills[index] = {...tempProfileInput.skills[index], [name.substr(6)]: value}\n      setProfileInput(tempProfileInput)\n    } else {\n\n      setProfileInput(prevState => {\n      return {...prevState, [name]: value}\n    })\n    }\n  }\n\n  const handleNumber = (e, index) => { \n    const {value} = e.target\n    const re = /^[0-9\\b]+$/\n    if (value === '' || re.test(value)) {\n      handleChange(e, index)\n    }\n  }\n\n  const handleAddSkill = e => {\n    e.preventDefault()\n\n    const temp = {...profileInput}\n    temp.skills.push({\n      name: '',\n      proficiency: ''\n    })\n\n    setProfileInput(temp)\n  }\n\n\n  const handleSubmit = e => {\n    e.preventDefault()\n    let formData = new FormData()\n    for (const [key, value] of Object.entries(profileInput)) {\n      console.log(key, value)\n    }\n    \n    \n    console.log(...profileInput.skills )\n    for (let pair of formData.entries()) {\n      console.log(pair[0], pair[1])\n    }\n\n    const config = {\n      headers: {\n        Authorization: localStorage.getItem('access_token')\n      ? 'JWT ' + localStorage.getItem('access_token')\n      : null,\t\n        'Content-Type': 'multipart-form-data'\n      }\n    }\n    const url = 'http://127.0.0.1:8000/about/1/'\n\n    axios.patch(url, formData, config)\n    .then(response => {})\n    .catch(err => console.log(err)) \n\n\n  axiosInstance.patch('about/1/', {\n    skills: [...profileInput.skills],\n  })\n  .then (response => console.log(response))\n  .catch(error => {\n    const err = error.response.data\n    // console.log(err)\n    err.skills.forEach((item, index) => {\n      if (item.name || item.proficiency) {\n        console.log(item, index)\n      }\n    })\n  })\n  }\n\n  React.useEffect(() => {\n    setProfileInput(profile)\n  }, [loading])\n\n\n  return (\n    <MuiDialog \n      open={open}\n      maxWidth=\"sm\"\n      onClose={()=>setClose(true)}\n      classes = {{paper: classes.paper}}\n    >\n      <DialogTitle>\n        <Button\n         align=\"right\"\n         color='secondary'\n         className={classes.closeButton}\n         onClick={()=>setClose(false)}\n        >\n          X\n        </Button>\n      </DialogTitle>\n\n      <DialogContent>\n        <Grid container justify=\"center\" >\n            <form ref={form}>\n              <Grid item xs={12} className={classes.input}>\n                <TextField \n                  fullWidth\n                  name=\"name\"\n                  label=\"name\"  \n                  value={profileInput.name}\n                  error={!profileInput.name}\n                  helperText={!profileInput.name ? '*this field cannot be empty': ''}\n                  onChange={handleChange}\n                />\n                <TextField \n                  fullWidth\n                  name=\"description\"\n                  label=\"description\"  \n                  value={profileInput.description}\n                  onChange={handleChange}\n                  multiline\n                  rows={5}\n                  error={!profileInput.description}\n                  helperText={!profileInput.description ? '*this field cannot be empty': ''}\n                />\n\n                <InputButton\n                >\n                  <input\n                    type='file'\n                    accept='image/*'\n                    name='image'\n                    onChange={handleChange}\n                  />\n                </InputButton>\n\n                <InputButton            \n                \n                >\n\n                  <input \n                    type='file'\n                    accept='application/pdf'\n                    name='resume'\n                    onChange={handleChange}\n                  />\n                </InputButton>\n                \n                <Typography\n                  variant='h6'\n                  className={classes.skills}\n                >\n                  skills\n                </Typography>\n                 \n                {\n                  profileInput.skills.map( (skill, index) => {\n                    \n                    return (\n                        <div key={index}\n                          className={classes.skillRoot}\n                        >\n                          <TextField \n                            label='skill name'\n                            name='skill_name'\n                            value={skill.name}\n                            onChange={ e => handleChange(e, index)}\n                            error={!skill.name}\n                            helperText={!skill.name ? '*this field cannot be empty': ''}\n                          \n                          />\n                          <TextField \n                            label='proficiency'\n                            name='skill_proficiency'\n                            value={skill.proficiency}\n                            onChange={(e => handleNumber(e, index))}\n                            error={!skill.proficiency}\n                            helperText={!skill.proficiency ? 'this field cannot be empty': ''}\n                          />\n                          <Button>\n                            d\n                          </Button>\n                        </div>\n                    )\n                  \n                  })\n\n                }\n                <Button \n                  color='primary'\n                  variant='contained'\n                  onClick={(e) => handleAddSkill(e)}\n                >\n                Add another\n                </Button>\n              </Grid>\n              \n              <Button\n                fullWidth\n                variant='contained'\n                className={classes.btnSubmit}\n                onClick={(e)=>handleSubmit(e)}\n              >\n                submit\n              </Button>\n            </form>\n        </Grid>\n\n\n\n      </DialogContent>\n      \n    </MuiDialog>\n  )\n}\n\nexport default Dialog\n"]},"metadata":{},"sourceType":"module"}