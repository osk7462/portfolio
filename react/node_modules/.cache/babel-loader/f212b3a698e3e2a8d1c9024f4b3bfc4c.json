{"ast":null,"code":"import axios from 'axios';\nconst baseURL = 'http://127.0.0.1:8000/';\nconst axiosInstance = axios.create({\n  baseURL: baseURL,\n  timeout: 5000,\n  headers: {\n    Authorization: localStorage.getItem('access_token') ? 'JWT ' + localStorage.getItem('access_token') : null,\n    'Content-Type': 'application/json',\n    accept: 'application/json'\n  }\n});\naxiosInstance.interceptors.response.use(response => {\n  return response;\n}, async function (error) {\n  const originalRequest = error.config;\n\n  if (typeof error.response === 'undefined') {\n    alert('A server/network error occurred. ' + 'Looks like CORS might be the problem. ' + 'Sorry about this - we will get it fixed shortly.');\n    return Promise.reject(error);\n  }\n\n  if (error.response.status === 401 && originalRequest.url === baseURL + 'token/refresh/') {\n    window.location.href = '/login/';\n    return Promise.reject(error);\n  }\n\n  if (error.response.data.code === 'token_not_valid' && error.response.status === 401 && error.response.statusText === 'Unauthorized') {\n    const refreshToken = localStorage.getItem('refresh_token'); // \tif (refreshToken != 'null') {\n    // \t\tconst tokenParts = JSON.parse(atob(refreshToken.split('.')[1]));\n    // \t\t// exp date in token is expressed in seconds, while now() returns milliseconds:\n    // \t\tconst now = Math.ceil(Date.now() / 1000);\n    // \t\tconsole.log(tokenParts.exp);\n    // \t\tif (tokenParts.exp > now) {\n    // \t\t\treturn axiosInstance\n    // \t\t\t\t.post('/token/refresh/', { refresh: refreshToken })\n    // \t\t\t\t.then((response) => {\n    // \t\t\t\t\tlocalStorage.setItem('access_token', response.data.access);\n    // \t\t\t\t\tlocalStorage.setItem('refresh_token', response.data.refresh);\n    // \t\t\t\t\taxiosInstance.defaults.headers['Authorization'] =\n    // \t\t\t\t\t\t'JWT ' + response.data.access;\n    // \t\t\t\t\toriginalRequest.headers['Authorization'] =\n    // \t\t\t\t\t\t'JWT ' + response.data.access;\n    // \t\t\t\t\treturn axiosInstance(originalRequest);\n    // \t\t\t\t})\n    // \t\t\t\t.catch((err) => {\n    // \t\t\t\t\tconsole.log(err);\n    // \t\t\t\t});\n    // \t\t} else {\n    // \t\t\tconsole.log('Refresh token is expired', tokenParts.exp, now);\n    // \t\t\twindow.location.href = '/login/';\n    // \t\t}\n    // \t} else {\n    // \t\tconsole.log('Refresh token not available.');\n    // \t\t// window.location.href = '/login/';\n    // \t}\n  } // specific error handling done elsewhere\n\n\n  return Promise.reject(error);\n});\nexport default axiosInstance;","map":{"version":3,"sources":["/home/osama/Desktop/portfolio/osama-khan/src/axios.js"],"names":["axios","baseURL","axiosInstance","create","timeout","headers","Authorization","localStorage","getItem","accept","interceptors","response","use","error","originalRequest","config","alert","Promise","reject","status","url","window","location","href","data","code","statusText","refreshToken"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,OAAO,GAAG,wBAAhB;AAEA,MAAMC,aAAa,GAAGF,KAAK,CAACG,MAAN,CAAa;AACjCF,EAAAA,OAAO,EAAEA,OADwB;AAEjCG,EAAAA,OAAO,EAAE,IAFwB;AAGjCC,EAAAA,OAAO,EAAE;AACPC,IAAAA,aAAa,EAAEC,YAAY,CAACC,OAAb,CAAqB,cAArB,IACb,SAASD,YAAY,CAACC,OAAb,CAAqB,cAArB,CADI,GAEb,IAHK;AAIP,oBAAgB,kBAJT;AAKPC,IAAAA,MAAM,EAAE;AALD;AAHwB,CAAb,CAAtB;AAcAP,aAAa,CAACQ,YAAd,CAA2BC,QAA3B,CAAoCC,GAApC,CACED,QAAD,IAAc;AACb,SAAOA,QAAP;AACA,CAHF,EAIC,gBAAgBE,KAAhB,EAAuB;AACtB,QAAMC,eAAe,GAAGD,KAAK,CAACE,MAA9B;;AAEA,MAAI,OAAOF,KAAK,CAACF,QAAb,KAA0B,WAA9B,EAA2C;AAC1CK,IAAAA,KAAK,CACJ,sCACC,wCADD,GAEC,kDAHG,CAAL;AAKA,WAAOC,OAAO,CAACC,MAAR,CAAeL,KAAf,CAAP;AACA;;AAED,MACCA,KAAK,CAACF,QAAN,CAAeQ,MAAf,KAA0B,GAA1B,IACAL,eAAe,CAACM,GAAhB,KAAwBnB,OAAO,GAAG,gBAFnC,EAGE;AACDoB,IAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,SAAvB;AACA,WAAON,OAAO,CAACC,MAAR,CAAeL,KAAf,CAAP;AACA;;AAED,MACCA,KAAK,CAACF,QAAN,CAAea,IAAf,CAAoBC,IAApB,KAA6B,iBAA7B,IACAZ,KAAK,CAACF,QAAN,CAAeQ,MAAf,KAA0B,GAD1B,IAEAN,KAAK,CAACF,QAAN,CAAee,UAAf,KAA8B,cAH/B,EAIE;AACD,UAAMC,YAAY,GAAGpB,YAAY,CAACC,OAAb,CAAqB,eAArB,CAArB,CADC,CAGF;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,GA3DqB,CA6DtB;;;AACA,SAAOS,OAAO,CAACC,MAAR,CAAeL,KAAf,CAAP;AACA,CAnEF;AAuEA,eAAeX,aAAf","sourcesContent":["import axios from 'axios'\n\nconst baseURL = 'http://127.0.0.1:8000/'\n\nconst axiosInstance = axios.create({\n  baseURL: baseURL,\n  timeout: 5000,\n  headers: {\n    Authorization: localStorage.getItem('access_token')\n    ? 'JWT ' + localStorage.getItem('access_token')\n    : null,\n    'Content-Type': 'application/json',\n    accept: 'application/json'\n  } \n\n});\n\n\naxiosInstance.interceptors.response.use(\n\t(response) => {\n\t\treturn response;\n\t},\n\tasync function (error) {\n\t\tconst originalRequest = error.config;\n\n\t\tif (typeof error.response === 'undefined') {\n\t\t\talert(\n\t\t\t\t'A server/network error occurred. ' +\n\t\t\t\t\t'Looks like CORS might be the problem. ' +\n\t\t\t\t\t'Sorry about this - we will get it fixed shortly.'\n\t\t\t);\n\t\t\treturn Promise.reject(error);\n\t\t}\n\n\t\tif (\n\t\t\terror.response.status === 401 &&\n\t\t\toriginalRequest.url === baseURL + 'token/refresh/'\n\t\t) {\n\t\t\twindow.location.href = '/login/';\n\t\t\treturn Promise.reject(error);\n\t\t}\n\n\t\tif (\n\t\t\terror.response.data.code === 'token_not_valid' &&\n\t\t\terror.response.status === 401 &&\n\t\t\terror.response.statusText === 'Unauthorized'\n\t\t) {\n\t\t\tconst refreshToken = localStorage.getItem('refresh_token');\n\n\t\t// \tif (refreshToken != 'null') {\n\t\t// \t\tconst tokenParts = JSON.parse(atob(refreshToken.split('.')[1]));\n\n\t\t// \t\t// exp date in token is expressed in seconds, while now() returns milliseconds:\n\t\t// \t\tconst now = Math.ceil(Date.now() / 1000);\n\t\t// \t\tconsole.log(tokenParts.exp);\n\n\t\t// \t\tif (tokenParts.exp > now) {\n\t\t// \t\t\treturn axiosInstance\n\t\t// \t\t\t\t.post('/token/refresh/', { refresh: refreshToken })\n\t\t// \t\t\t\t.then((response) => {\n\t\t// \t\t\t\t\tlocalStorage.setItem('access_token', response.data.access);\n\t\t// \t\t\t\t\tlocalStorage.setItem('refresh_token', response.data.refresh);\n\n\t\t// \t\t\t\t\taxiosInstance.defaults.headers['Authorization'] =\n\t\t// \t\t\t\t\t\t'JWT ' + response.data.access;\n\t\t// \t\t\t\t\toriginalRequest.headers['Authorization'] =\n\t\t// \t\t\t\t\t\t'JWT ' + response.data.access;\n\n\t\t// \t\t\t\t\treturn axiosInstance(originalRequest);\n\t\t// \t\t\t\t})\n\t\t// \t\t\t\t.catch((err) => {\n\t\t// \t\t\t\t\tconsole.log(err);\n\t\t// \t\t\t\t});\n\t\t// \t\t} else {\n\t\t// \t\t\tconsole.log('Refresh token is expired', tokenParts.exp, now);\n\t\t// \t\t\twindow.location.href = '/login/';\n\t\t// \t\t}\n\t\t// \t} else {\n\t\t// \t\tconsole.log('Refresh token not available.');\n\t\t// \t\t// window.location.href = '/login/';\n\t\t// \t}\n\t\t}\n\n\t\t// specific error handling done elsewhere\n\t\treturn Promise.reject(error);\n\t}\n);\n\n\nexport default axiosInstance;"]},"metadata":{},"sourceType":"module"}